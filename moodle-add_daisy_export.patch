From e039142b830d7cc4eb05f9533e006fba741cbc5f Mon Sep 17 00:00:00 2001
From: Pavel Sokolov <pavel.m.sokolov@gmail.com>
Date: Tue, 18 Jan 2022 12:35:50 +0300
Subject: [PATCH] Add Daisy gradebook export

---
 grade/export/grade_export_form.php    |  4 ++
 grade/export/lib.php                  |  8 +++-
 grade/export/ods/grade_export_ods.php | 57 +++++++++++++++++++-----
 grade/export/txt/grade_export_txt.php | 20 +++++++--
 grade/export/xls/grade_export_xls.php | 63 +++++++++++++++++++++------
 5 files changed, 122 insertions(+), 30 deletions(-)

diff --git a/grade/export/grade_export_form.php b/grade/export/grade_export_form.php
index 889f6c469ce..5292f3ca3ba 100644
--- a/grade/export/grade_export_form.php
+++ b/grade/export/grade_export_form.php
@@ -96,6 +96,10 @@ class grade_export_form extends moodleform {
             $mform->setConstant('export_onlyactive', 1);
         }
 
+        $mform->addElement('advcheckbox', 'export_daisy', 'Export for Daisy (only DaisyID and Grades)');
+        $mform->setType('export_daisy', PARAM_BOOL);
+        $mform->setDefault('export_daisy', 0);
+
         if (empty($features['simpleui'])) {
             $options = array('10'=>10, '20'=>20, '100'=>100, '1000'=>1000, '100000'=>100000);
             $mform->addElement('select', 'previewrows', get_string('previewrows', 'grades'), $options);
diff --git a/grade/export/lib.php b/grade/export/lib.php
index 8a3fe3af910..96eddaf0633 100644
--- a/grade/export/lib.php
+++ b/grade/export/lib.php
@@ -189,6 +189,10 @@ abstract class grade_export {
             $this->onlyactive = $formdata->export_onlyactive;
         }
 
+        if (isset($formdata->export_daisy)) {
+            $this->daisy = $formdata->export_daisy;
+        }
+
         if (isset($formdata->previewrows)) {
             $this->previewrows = $formdata->previewrows;
         }
@@ -436,6 +440,7 @@ abstract class grade_export {
                         'updatedgradesonly' => $updatedgradesonly,
                         'decimalpoints'     => $this->decimalpoints,
                         'export_onlyactive' => $this->onlyactive,
+                        'export_daisy'      => $this->daisy,
                         'usercustomfields'  => $this->usercustomfields,
                         'displaytype'       => $displaytypes,
                         'key'               => $this->userkey);
@@ -607,13 +612,14 @@ abstract class grade_export {
      * @return stdClass $formdata
      */
     public static function export_bulk_export_data($id, $itemids, $exportfeedback, $onlyactive, $displaytype,
-                                                   $decimalpoints, $updatedgradesonly = null, $separator = null) {
+                                                   $decimalpoints, $updatedgradesonly = null, $separator = null, $daisy = false) {
 
         $formdata = new \stdClass();
         $formdata->id = $id;
         $formdata->itemids = self::convert_flat_itemids_to_array($itemids);
         $formdata->exportfeedback = $exportfeedback;
         $formdata->export_onlyactive = $onlyactive;
+        $formdata->export_daisy = $daisy;
         $formdata->display = self::convert_flat_displaytypes_to_array($displaytype);
         $formdata->decimals = $decimalpoints;
 
diff --git a/grade/export/ods/grade_export_ods.php b/grade/export/ods/grade_export_ods.php
index 40bbd903bc1..31bae2f32c1 100644
--- a/grade/export/ods/grade_export_ods.php
+++ b/grade/export/ods/grade_export_ods.php
@@ -38,7 +38,7 @@ class grade_export_ods extends grade_export {
      * To be implemented by child classes
      */
     function print_grades() {
-        global $CFG;
+        global $CFG, $DB;
         require_once($CFG->dirroot.'/lib/odslib.class.php');
 
         $export_tracking = $this->track_exports();
@@ -59,6 +59,14 @@ class grade_export_ods extends grade_export {
 
         // Print names of all the fields.
         $profilefields = grade_helper::get_user_profile_fields($this->course->id, $this->usercustomfields);
+        if ($this->daisy) {
+            foreach ($profilefields as $id => $field) {
+                if ($field->shortname != 'idnumber') {
+                    unset($profilefields[$id]);
+                }
+            }
+            $profilefields = array_values($profilefields);
+        }
         foreach ($profilefields as $id => $field) {
             $myxls->write_string(0, $id, $field->fullname);
         }
@@ -72,28 +80,25 @@ class grade_export_ods extends grade_export {
             }
 
             // Add a column_feedback column.
-            if ($this->export_feedback) {
+            if ($this->export_feedback && !$this->daisy) {
                 $myxls->write_string(0, $pos++, $this->format_column_name($grade_item, true));
             }
         }
         // Last downloaded column header.
-        $myxls->write_string(0, $pos++, get_string('timeexported', 'gradeexport_ods'));
+        if (!$this->daisy) {
+            $myxls->write_string(0, $pos++, get_string('timeexported', 'gradeexport_ods'));
+        }
 
         // Print all the lines of data.
-        $i = 0;
+        $i = 1;
         $geub = new grade_export_update_buffer();
         $gui = new graded_users_iterator($this->course, $this->columns, $this->groupid);
         $gui->require_active_enrolment($this->onlyactive);
         $gui->allow_user_custom_fields($this->usercustomfields);
         $gui->init();
         while ($userdata = $gui->next_user()) {
-            $i++;
             $user = $userdata->user;
-
-            foreach($profilefields as $id => $field) {
-                $fieldvalue = grade_helper::get_user_field_value($user, $field);
-                $myxls->write_string($i, $id, $fieldvalue);
-            }
+            $empty = true;
             $j = count($profilefields);
 
             if (!$this->onlyactive) {
@@ -109,19 +114,47 @@ class grade_export_ods extends grade_export {
                     $gradestr = $this->format_grade($grade, $gradedisplayconst);
                     if (is_numeric($gradestr)) {
                         $myxls->write_number($i, $j++, $gradestr);
+                        $empty = false;
                     } else {
+                        $scale = $grade->grade_item->scaleid ? $DB->get_record('scale', ['id' => $grade->grade_item->scaleid]) : null;
+                        if ($scale && $scale->courseid == 0 && $this->daisy) {
+                            if ($gradestr == 'Underkänd' || $gradestr == 'F' || $gradestr == 'Fx' || $gradestr == 'Rest' || $gradestr == '-') {
+                                $gradestr = '';
+                            }
+                            if ($gradestr == 'P' || $gradestr == 'Godkänd') {
+                                $gradestr = 'G';
+                            }
+                        }
+                        if ($gradestr) {
+                            $empty = false;
+                        }
                         $myxls->write_string($i, $j++, $gradestr);
                     }
                 }
 
                 // writing feedback if requested
-                if ($this->export_feedback) {
+                if ($this->export_feedback && !$this->daisy) {
                     $myxls->write_string($i, $j++, $this->format_feedback($userdata->feedbacks[$itemid], $grade));
                 }
             }
+
             // Time exported.
-            $myxls->write_string($i, $j++, time());
+            if (!$this->daisy) {
+                $myxls->write_string($i, $j++, time());
+            }
+            foreach ($profilefields as $id => $field) {
+                $fieldvalue = grade_helper::get_user_field_value($user, $field);
+                if (!$empty || !$this->daisy) {
+                    $myxls->write_string($i, $id, $fieldvalue);
+                }
+            }
+            if ($this->daisy && $empty) {
+                unset($myxls->data[$i]);
+            } else {
+                $i++;
+            }
         }
+
         $gui->close();
         $geub->close();
 
diff --git a/grade/export/txt/grade_export_txt.php b/grade/export/txt/grade_export_txt.php
index e262d93ee0c..21b10b287c8 100644
--- a/grade/export/txt/grade_export_txt.php
+++ b/grade/export/txt/grade_export_txt.php
@@ -59,6 +59,14 @@ class grade_export_txt extends grade_export {
 
         // Print names of all the fields
         $exporttitle = array();
+        if ($this->daisy) {
+            foreach ($profilefields as $id => $field) {
+                if ($field->shortname != 'idnumber') {
+                    unset($profilefields[$id]);
+                }
+            }
+            $profilefields = array_values($profilefields);
+        }
         foreach ($profilefields as $field) {
             $exporttitle[] = $field->fullname;
         }
@@ -72,12 +80,14 @@ class grade_export_txt extends grade_export {
             foreach ($this->displaytype as $gradedisplayname => $gradedisplayconst) {
                 $exporttitle[] = $this->format_column_name($grade_item, false, $gradedisplayname);
             }
-            if ($this->export_feedback) {
+            if ($this->export_feedback && !$this->daisy) {
                 $exporttitle[] = $this->format_column_name($grade_item, true);
             }
         }
         // Last downloaded column header.
-        $exporttitle[] = get_string('timeexported', 'gradeexport_txt');
+        if (!$this->daisy) {
+            $exporttitle[] = get_string('timeexported', 'gradeexport_txt');
+        }
         $csvexport->add_data($exporttitle);
 
         // Print all the lines of data.
@@ -108,12 +118,14 @@ class grade_export_txt extends grade_export {
                     $exportdata[] = $this->format_grade($grade, $gradedisplayconst);
                 }
 
-                if ($this->export_feedback) {
+                if ($this->export_feedback && !$this->daisy) {
                     $exportdata[] = $this->format_feedback($userdata->feedbacks[$itemid], $grade);
                 }
             }
             // Time exported.
-            $exportdata[] = time();
+            if (!$this->daisy) {
+                $exportdata[] = time();
+            }
             $csvexport->add_data($exportdata);
         }
         $gui->close();
diff --git a/grade/export/xls/grade_export_xls.php b/grade/export/xls/grade_export_xls.php
index ec4bbcd2d15..e2dd5ead173 100644
--- a/grade/export/xls/grade_export_xls.php
+++ b/grade/export/xls/grade_export_xls.php
@@ -38,7 +38,7 @@ class grade_export_xls extends grade_export {
      * To be implemented by child classes
      */
     public function print_grades() {
-        global $CFG;
+        global $CFG, $DB;
         require_once($CFG->dirroot.'/lib/excellib.class.php');
 
         $export_tracking = $this->track_exports();
@@ -60,6 +60,14 @@ class grade_export_xls extends grade_export {
 
         // Print names of all the fields
         $profilefields = grade_helper::get_user_profile_fields($this->course->id, $this->usercustomfields);
+        if ($this->daisy) {
+            foreach ($profilefields as $id => $field) {
+                if ($field->shortname != 'idnumber') {
+                    unset($profilefields[$id]);
+                }
+            }
+            $profilefields = array_values($profilefields);
+        }
         foreach ($profilefields as $id => $field) {
             $myxls->write_string(0, $id, $field->fullname);
         }
@@ -71,30 +79,29 @@ class grade_export_xls extends grade_export {
             foreach ($this->displaytype as $gradedisplayname => $gradedisplayconst) {
                 $myxls->write_string(0, $pos++, $this->format_column_name($grade_item, false, $gradedisplayname));
             }
+
             // Add a column_feedback column
-            if ($this->export_feedback) {
+            if ($this->export_feedback && !$this->daisy) {
                 $myxls->write_string(0, $pos++, $this->format_column_name($grade_item, true));
             }
         }
         // Last downloaded column header.
-        $myxls->write_string(0, $pos++, get_string('timeexported', 'gradeexport_xls'));
+        if (!$this->daisy) {
+            $myxls->write_string(0, $pos++, get_string('timeexported', 'gradeexport_xls'));
+        }
 
         // Print all the lines of data.
-        $i = 0;
+        $i = 1;
         $geub = new grade_export_update_buffer();
         $gui = new graded_users_iterator($this->course, $this->columns, $this->groupid);
         $gui->require_active_enrolment($this->onlyactive);
         $gui->allow_user_custom_fields($this->usercustomfields);
         $gui->init();
         while ($userdata = $gui->next_user()) {
-            $i++;
             $user = $userdata->user;
-
-            foreach ($profilefields as $id => $field) {
-                $fieldvalue = grade_helper::get_user_field_value($user, $field);
-                $myxls->write_string($i, $id, $fieldvalue);
-            }
+            $empty = true;
             $j = count($profilefields);
+
             if (!$this->onlyactive) {
                 $issuspended = ($user->suspendedenrolment) ? get_string('yes') : '';
                 $myxls->write_string($i, $j++, $issuspended);
@@ -103,26 +110,56 @@ class grade_export_xls extends grade_export {
                 if ($export_tracking) {
                     $status = $geub->track($grade);
                 }
+
                 foreach ($this->displaytype as $gradedisplayconst) {
                     $gradestr = $this->format_grade($grade, $gradedisplayconst);
                     if (is_numeric($gradestr)) {
                         $myxls->write_number($i, $j++, $gradestr);
+                        $empty = false;
                     } else {
+                        $scale = $grade->grade_item->scaleid ? $DB->get_record('scale', ['id' => $grade->grade_item->scaleid]) : null;
+                        if ($scale && $scale->courseid == 0 && $this->daisy) {
+                            if ($gradestr == 'Underkänd' || $gradestr == 'F' || $gradestr == 'Fx' || $gradestr == 'Rest' || $gradestr == '-') {
+                                $gradestr = '';
+                            }
+                            if ($gradestr == 'P' || $gradestr == 'Godkänd') {
+                                $gradestr = 'G';
+                            }
+                        }
+                        if ($gradestr) {
+                            $empty = false;
+                        }
                         $myxls->write_string($i, $j++, $gradestr);
                     }
                 }
+
                 // writing feedback if requested
-                if ($this->export_feedback) {
+                if ($this->export_feedback && !$this->daisy) {
                     $myxls->write_string($i, $j++, $this->format_feedback($userdata->feedbacks[$itemid], $grade));
                 }
             }
+
             // Time exported.
-            $myxls->write_string($i, $j++, time());
+            if (!$this->daisy) {
+                $myxls->write_string($i, $j++, time());
+            }
+            foreach ($profilefields as $id => $field) {
+                $fieldvalue = grade_helper::get_user_field_value($user, $field);
+                if (!$empty || !$this->daisy) {
+                    $myxls->write_string($i, $id, $fieldvalue);
+                }
+            }
+            if ($this->daisy && $empty) {
+                unset($myxls->data[$i]);
+            } else {
+                $i++;
+            }
         }
+
         $gui->close();
         $geub->close();
 
-    /// Close the workbook
+        // Close the workbook
         $workbook->close();
 
         exit;
-- 
2.34.1

